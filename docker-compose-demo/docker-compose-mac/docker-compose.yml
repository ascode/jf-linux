version: '3.7'

services:
  # nginx挂载了conf.d文件夹之后不能直接启动，配置了privileged: true也不行，解决办法为，先不挂载conf.d文件夹直接启动，然后从容器里面拷贝出conf.d/default.conf文件，放在本机的conf.d文件夹，然后再挂载conf.d文件夹启动，这时候怎么启动都行，也就是说要挂载conf.d文件夹，必须本机的conf.d文件夹中有default.conf文件才能正常启动。
  # 已经测试-不改变docker-compose.yml,直接挂载已有本机文件夹重建容器，可恢复以前的数据，也就是备份的时候直接备份本机conf.d文件夹即可
  nginx:
      container_name: nginx
      image: nginx
      restart: always
      volumes:
        # 如果要挂载到/etc/nginx，则需要先不挂载，直接启动一个nginx容器，然后把/etc/nginx文件夹拷贝出来作为要挂载的本地目录
        - /Users/jinfei/Laboratory/DockerShare/Nginx/etc/nginx:/etc/nginx
        - /Users/jinfei/Laboratory/DockerShare/Nginx/www:/www
        # - /Users/jinfei/Laboratory/DockerShare/Nginx/conf.d:/etc/nginx/conf.d
      ports:
        - "80:80"
      environment:
        - NGINX_HOST=bgenius.cn
        - NGINX_PORT=80
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 50M
          reservations:
            cpus: '0.01'
            memory: 20M
        restart_policy:
          condition: any
          delay: 5s
          max_attempts: 3
          window: 120s
      depends_on: 
        - gitlab-ce
      links: 
        - gitlab-ce:gitlab-ce

  mongodb:
      container_name: mongodb
      image: mongo
      restart: always
      ports:
        - 8081:8081
        - 27017:27017
      environment:
        ME_CONFIG_MONGODB_ADMINUSERNAME: root
        ME_CONFIG_MONGODB_ADMINPASSWORD: Neural01@
      volumes: 
        - /Users/jinfei/Laboratory/DockerShare/MongoDB/data:/data/db
        - /Users/jinfei/Laboratory/DockerShare/MongoDB/config:/data/configdb
      deploy:
        resources:
          limits:
            cpus: '0.10'
            memory: 50M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s
  
  mongoclient:
      container_name: mongoclient
      image: mongoclient/mongoclient
      restart: always
      ports:
        - 3000:3000
      volumes: 
        - /Users/jinfei/Laboratory/DockerShare/mongoclient/data:/data/db
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 50M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s

  # 已经测试-不改变docker-compose.yml,直接挂载已有本机文件夹重建容器，可恢复以前的数据，也就是备份的时候直接备份被挂载的本机文件夹即可
  gitlab-ce:
      privileged: true
      container_name: gitlab-ce
      image: gitlab/gitlab-ce:latest
      restart: always
      volumes: 
        - /Users/jinfei/Laboratory/DockerShare/gitlab-ce/log:/var/log/gitlab
        - /Users/jinfei/Laboratory/DockerShare/gitlab-ce/opt:/var/opt/gitlab
        - /Users/jinfei/Laboratory/DockerShare/gitlab-ce/etc:/etc/gitlab
      ports:
        - "3443:443"
        - "380:80"
        - "322:22"
      expose:
        - "443"
        - "80"
        - "22"
      deploy:
        resources:
          limits:
            cpus: '0.10'
            memory: 4000M
          reservations:
            cpus: '0.05'
            memory: 1000M
        restart_policy:
          condition: any
          delay: 5s
          max_attempts: 3
          window: 120s

  jenkins:
      container_name: jenkins
      image: jenkins
      restart: always
      environment: 
        JENKINS_SLAVE_AGENT_PORT: 50001
      ports: 
        - 18081:8080
        - 50001:50001
      volumes: 
        - /Users/jinfei/Laboratory/DockerShare/Jenkins/var/jenkins_home:/var/jenkins_home
      deploy:
        resources: 
          limits: 
            cpus: '0.05'
            memory: 100M
          reservations: 
            cpus: '0.10'
            memory: 50M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s

  # 已经测试-不改变docker-compose.yml,直接挂载已有本机文件夹重建容器，可恢复以前的数据，也就是备份的时候直接备份被挂载的本机文件夹即可
  mariadb:
      container_name: mariadb
      image: mariadb
      restart: always
      environment:
        MYSQL_ROOT_PASSWORD: Vosung123
      ports:
        - 3306:3306
      volumes:
        - /Users/jinfei/Laboratory/DockerShare/MariaDB/conf:/etc/mysql
        - /Users/jinfei/Laboratory/DockerShare/MariaDB/data:/var/lib/mysql
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 500M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: any
          delay: 5s
          max_attempts: 3
          window: 120s

  mariadb1:
      container_name: mariadb1
      image: mariadb
      restart: always
      environment:
        MYSQL_ROOT_PASSWORD: Vosung123
      ports:
        - 3307:3306
      volumes:
        - /Users/jinfei/Laboratory/DockerShare/MariaDB1/conf:/etc/mysql
        - /Users/jinfei/Laboratory/DockerShare/MariaDB1/data:/var/lib/mysql
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 50M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s

  # orientdb挂载config文件夹之后，直接启动会失败，解决方法为：先不挂载config文件夹，运行docker-compose up命令启动容器，然后挂载config文件夹，不删除已经创建的容器，重新启动容器覆盖原有容器，就可以正常启动了
  # 已经测试-不改变docker-compose.yml,直接挂载已有本机文件夹重建容器，可恢复以前的数据，也就是备份的时候直接备份被挂载的本机文件夹即可
  orientdb:
      container_name: orientdb
      image: orientdb
      restart: always
      privileged: true
      environment: 
        ORIENTDB_ROOT_PASSWORD: rootpwd
        ORIENTDB_NODE_NAME: odb1
      ports: 
        - "2424:2424"
        - "2480:2480"
      volumes:
        - /Users/jinfei/Laboratory/DockerShare/OrientDB/databases:/orientdb/databases
        - /Users/jinfei/Laboratory/DockerShare/OrientDB/backup:/orientdb/backup
        - /Users/jinfei/Laboratory/DockerShare/OrientDB/config:/orientdb/config
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 500M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: any
          delay: 5s
          max_attempts: 3
          window: 120s
      command: /orientdb/bin/server.sh  -Ddistributed=true

  sqlserver1:
      container_name: sqlserver1
      image: microsoft/mssql-server-linux:latest
      restart: always
      environment:
        - ACCEPT_EULA=Y
        - SA_PASSWORD=Neural123*()
        - MSSQL_PID=Enterprise
      ports:
        - 1433:1433
      deploy:
        resources:
          limits:
            cpus: '0.10'
            memory: 3000M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s
  # volumes加上了就不能启动
  #    volumes:
  #      - /Users/jinfei/Laboratory/DockerShare/MSSqlServer/mssql/data:/var/opt/mssql/data


  rabbitmq:
      container_name: rabbitmq
      image: rabbitmq:management
      restart: always
      ports:
        - "5672:5672"
        - "15672:15672"
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 50M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s

  jbpm-showcase:
      container_name: jbpm-showcase
      image: jboss/jbpm-workbench-showcase
      restart: always
      ports:
        - "18080:8080"
        - "18001:8001"
      expose:
        - "18080"
        - "18001"
      deploy:
        resources:
          limits:
            cpus: '0.10'
            memory: 2000M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s

  swagger_editor:
      container_name: swagger_editor
      image: swaggerapi/swagger-editor
      restart: always
      ports:
        - 9080:8080
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 50M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s

  swagger_ui:
      container_name: swagger_ui
      image: swaggerapi/swagger-ui
      restart: always
      ports:
        - 9081:8080
      deploy:
        resources:
          limits:
            cpus: '0.05'
            memory: 50M
          reservations:
            cpus: '0.05'
            memory: 20M
        restart_policy:
          condition: on-failure
          delay: 5s
          max_attempts: 3
          window: 120s
  # 如下是选填
      environment:
        SWAGGER_JSON: /foo/swagger.json
        BASE_URL: /swagger
      volumes:
        - /Users/jinfei/Laboratory/DockerShare/Swagger_UI/bar:/foo